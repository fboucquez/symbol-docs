#####
Block
#####

The central element of every cryptocurrency is a public ledger called the **blockchain**, which links blocks together.

Since the blocks in the chain are ordered, the complete :doc:`transaction <transaction>` history is held on the blockchain.
Subsequent blocks have increasing heights that differ by one.
Each block can contain up to ``1,000`` transactions (public network), being this value :ref:`configurable per network <config-network-properties>`.

|codename| blocks complete every ``15`` seconds, making transactions confirm quickly enough for everyday use.

******
Header
******

Nodes stores blocks in a serialized form as follows:

**Version**: 0x01

**EntityType**: 0x8143

**Inlines:**

* :ref:`SizePrefixedEntity <size-prefixed-entity>`
* :ref:`VerifiableEntity <verifiable-entity>`
* :ref:`EntityBody <entity-body>`

.. _block-header:

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;
    :widths: 30 30 40

    height; :schema:`Height <types.cats>`; Height of the blockchain. Each block has a unique height. Subsequent blocks differ in height by 1.
    timestamp; :schema:`Timestamp <types.cats>`; Number of milliseconds elapsed since the creation of the nemesis block.
    difficulty; :schema:`Difficulty <types.cats>`; Determines how difficult is to find a new block, based on previous blocks.
    generationHashProof; :schema:`VrfProof <schemas/block.cats>`; Generation hash proof.
    previousBlockHash; :schema:`Hash256 <types.cats>`; Hash of the previous block.
    transactionsHash; :schema:`Hash256 <types.cats>`; Hash of the transactions in this block.
    receiptsHash; :schema:`Hash256 <types.cats>`;  Hash of the receipts generated by this block.
    stateHash; :schema:`Hash256 <types.cats>`;   Hash of the global chain state at this block.
    beneficiaryAddress ; :schema:`Address <types.cats>`; Address of the optional beneficiary designated by harvester.
    feeMultiplier; :schema:`BlockFeeMultiplier <types.cats>` ; Fee multiplier applied to block transactions.
    blockHeader_Reserved1; uint32; Reserved padding to align end of BlockHeader on 8-byte boundary.

.. |merkle| raw:: html

    <a href="https://en.wikipedia.org/wiki/Merkle_tree" target="_blank">merkle tree</a>

.. |patricia| raw:: html

   <a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank">patricia tree</a>

********
Creation
********

|codename| calls the first block in the chain the **nemesis block**.
The first block is defined before launching a new network and sets the distribution of the network currency mosaics.

The process of creating the subsequent new blocks is called :doc:`harvesting <harvesting>`.

Blocks are created by :doc:`accounts <account>`, which are chosen by the :doc:`consensus algorithm <consensus-algorithm>` based on their importance score.
The consensus algorithm determines a new account to harvest the subsequent block after each block creation.

The harvesting account receives the :doc:`fees <fees>` for the transactions added in the block and the mosaics created by :doc:`inflation <inflation>`.
This gives the harvester an incentive to add as many transactions to the block as possible.

.. _finalization:

************
Finalization
************

Finalization is the process of making changes on a blockchain ledger permanent.
Before blocks reach finality, they can be rolled back in the presence of a network failure or partition.
Once blocks completes finalization, they are immutable.

For every block, a sorting algorithm selects zero, one, or multiple accounts to propose the block to be finalized; these selected accounts unveil themselves at the beginning of the iteration to other nodes.
Then, the committee selection algorithm verifies the eligible accounts to vote on the finality of the proposed block.
If the proposed block matches the node records, verified accounts will cast a positive vote to tag the block as finalized.

The eligibility for voting has 2 requirements:
#. Has at least minVoterBalance network currency units.
#. Registered as a voter by announcing a VotingKeyLinkTransaction

A block can be reversed until 2/3 of the stakes registered to vote have marked it as finalized.
After that point, the transactions linked to the block are permanently recorded on the blockchain.

When there is low connectivity or many bad actors, finalization will take longer to occur and create the potential for larger rollbacks and unwinding.
Rollback will always be allowed to the last finalized block, but a finalized block will never be allowed to be rolled back.
Thus, clients that rely on the immutability of the blockchain history should only trust transactions from finalized blocks.

********************
Related transactions
********************

.. csv-table::
    :header:  "Id",  "Type", "Description"
    :widths: 20 30 50
    :delim: ;
    
    0x4143; :ref:`VotingKeyLinkTransaction <voting-key-link-transaction>`; Link an account with a BLS public key. Required for node operators willing to vote finalized blocks.

******
Guides
******

.. postlist::
    :category: Block
    :date: %A, %B %d, %Y
    :format: {title}
    :list-style: circle
    :excerpts:
    :sort:

Continue: :doc:`Transaction <transaction>`.
